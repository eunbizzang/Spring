스프링 프레임워크 = 가장 성공적인 "경량(light-weight)프레임워크"

스프링의 주요 특징
1. POJO 기반의 구성
    Plain Old Java Object.
    일반적인 Java 코드를 이용해서 객체를 구성하는 방식을 그대로 스프링에서 사용 할 수 있다.

2. 의존성주입(DI)
    Dependency , Injection
    의존성이 필요한 객체에 필요한 객체를 찾아서 주입하는 방식
    ApplicationContext : 필요한 객체들을 생성, 주입
    -> 개발자들은 객체와 객체를 분리해서 생성하고, 이러한 객체들을 엮는(wiring)작업을 하는 형태의 개발
    Bean : ApplicationContext가 관리하는 객체들
            빈과 빈 사이의 의존관계 처리를 XML설정, 어노테이션 설정, Java설정으로 이용 할 수 있음.

3. AOP지원
    Aspect Oriented Programming
    횡단관심사(cross-concern : 보안, 로그, 트랜잭션과 같은 부분)을 분리해서 제작.
    개발자가 비즈니스 로직에만 집중할 수 있따.

4. 트랜잭션 지원
    어노테이션이나 XML로 설정이 가능해서 매번 상황에 맞는 코드를 작성 할 필요가 없다.

어노테이션들
1. Lombok관련
    @Setter
        value = 접근제한 속성
        onMethod = setter메서드의 생성 시 메서드에 추가할 어노테이션을 지정 ex) @Autowired
        onParam = setter메서드의 파라미터에 어노테이션을 사용하는 경우에 적용

    @Data
        Lombok에서 가장 자주 사용되는 어노테이션
        @ToString, @EqualsAndHashCode, @Getter/@Setter, @RequiredArgsConstructor을 모두 가지고 있음

    @Log4j 어노테이션 : 로그 객체 생성

2. Spring관련
    @Component
        해당 클래스가 스프링에서 객체로 만들어서 관리하는 대상임을 명시하는 어노테이션
        @Component가 있는 클래스를 스프링이 읽어주도록 @ComponentScan틀 통해 지정 -> 객체로 생성해서 빈으로 관리
    @Autowired
        스프링 내부에서 자신이 특정한 객체에 의존적이므로 자신에게 해당 타입의 빈을 주입 해주라는 표시

3. 테스트관련 어노테이션
    @ContextConfiguration
        location : 문자열의 배열로 XML설정 파일을 명시
        classes : @Configuration이 적용된 클래스를 지정해 줄 수도 있음.
    @Runwith 
        테스트시 필요한 클래스를 지정
    @Test
        junit에서 해당 메서드가 jUnit상에서 단위테스트의 대상인지 알려줌